/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.conekta.model

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.conekta.model.OrderRequest
import io.conekta.model.ChargeRequest
import io.conekta.model.CheckoutRequest
import io.conekta.model.CustomerShippingContacts
import io.conekta.model.OrderDiscountLinesRequest
import io.conekta.model.OrderFiscalEntityRequest
import io.conekta.model.OrderRequestCustomerInfo
import io.conekta.model.OrderTaxRequest
import io.conekta.model.Product
import io.conekta.model.ShippingRequest

class OrderRequestTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OrderRequest
        //val modelInstance = OrderRequest()

        // to test the property `currency` - Currency with which the payment will be made. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)
        should("test currency") {
            // uncomment below to test the property
            //modelInstance.currency shouldBe ("TODO")
        }

        // to test the property `customerInfo`
        should("test customerInfo") {
            // uncomment below to test the property
            //modelInstance.customerInfo shouldBe ("TODO")
        }

        // to test the property `lineItems` - List of [products](https://developers.conekta.com/v2.1.0/reference/orderscreateproduct) that are sold in the order. You must have at least one product.
        should("test lineItems") {
            // uncomment below to test the property
            //modelInstance.lineItems shouldBe ("TODO")
        }

        // to test the property `charges` - List of [charges](https://developers.conekta.com/v2.1.0/reference/orderscreatecharge) that are applied to the order
        should("test charges") {
            // uncomment below to test the property
            //modelInstance.charges shouldBe ("TODO")
        }

        // to test the property `checkout`
        should("test checkout") {
            // uncomment below to test the property
            //modelInstance.checkout shouldBe ("TODO")
        }

        // to test the property `discountLines` - List of [discounts](https://developers.conekta.com/v2.1.0/reference/orderscreatediscountline) that are applied to the order. You must have at least one discount.
        should("test discountLines") {
            // uncomment below to test the property
            //modelInstance.discountLines shouldBe ("TODO")
        }

        // to test the property `fiscalEntity`
        should("test fiscalEntity") {
            // uncomment below to test the property
            //modelInstance.fiscalEntity shouldBe ("TODO")
        }

        // to test the property `metadata` - Metadata associated with the order
        should("test metadata") {
            // uncomment below to test the property
            //modelInstance.metadata shouldBe ("TODO")
        }

        // to test the property `needsShippingContact` - Allows you to fill out the shipping information at checkout
        should("test needsShippingContact") {
            // uncomment below to test the property
            //modelInstance.needsShippingContact shouldBe ("TODO")
        }

        // to test the property `preAuthorize` - Indicates whether the order charges must be preauthorized
        should("test preAuthorize") {
            // uncomment below to test the property
            //modelInstance.preAuthorize shouldBe ("TODO")
        }

        // to test the property `processingMode` - Indicates the processing mode for the order, either ecommerce, recurrent or validation.
        should("test processingMode") {
            // uncomment below to test the property
            //modelInstance.processingMode shouldBe ("TODO")
        }

        // to test the property `returnUrl` - Indicates the redirection callback upon completion of the 3DS2 flow.
        should("test returnUrl") {
            // uncomment below to test the property
            //modelInstance.returnUrl shouldBe ("TODO")
        }

        // to test the property `shippingContact`
        should("test shippingContact") {
            // uncomment below to test the property
            //modelInstance.shippingContact shouldBe ("TODO")
        }

        // to test the property `shippingLines` - List of [shipping costs](https://developers.conekta.com/v2.1.0/reference/orderscreateshipping). If the online store offers digital products.
        should("test shippingLines") {
            // uncomment below to test the property
            //modelInstance.shippingLines shouldBe ("TODO")
        }

        // to test the property `taxLines` - List of [taxes](https://developers.conekta.com/v2.1.0/reference/orderscreatetaxes) that are applied to the order.
        should("test taxLines") {
            // uncomment below to test the property
            //modelInstance.taxLines shouldBe ("TODO")
        }

        // to test the property `threeDsMode` - Indicates the 3DS2 mode for the order, either smart or strict.
        should("test threeDsMode") {
            // uncomment below to test the property
            //modelInstance.threeDsMode shouldBe ("TODO")
        }

    }
}
