/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.conekta.model

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.conekta.model.Checkout
import io.conekta.model.CheckoutOrderTemplate

class CheckoutTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Checkout
        //val modelInstance = Checkout()

        // to test the property `allowedPaymentMethods` - Those are the payment methods that will be available for the link
        should("test allowedPaymentMethods") {
            // uncomment below to test the property
            //modelInstance.allowedPaymentMethods shouldBe ("TODO")
        }

        // to test the property `expiresAt` - It is the time when the link will expire. It is expressed in seconds since the Unix epoch. The valid range is from 2 to 365 days (the valid range will be taken from the next day of the creation date at 00:01 hrs) 
        should("test expiresAt") {
            // uncomment below to test the property
            //modelInstance.expiresAt shouldBe ("TODO")
        }

        // to test the property `name` - Reason for charge
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `orderTemplate`
        should("test orderTemplate") {
            // uncomment below to test the property
            //modelInstance.orderTemplate shouldBe ("TODO")
        }

        // to test the property `recurrent` - false: single use. true: multiple payments
        should("test recurrent") {
            // uncomment below to test the property
            //modelInstance.recurrent shouldBe ("TODO")
        }

        // to test the property `type` - It is the type of link that will be created. It must be a valid type.
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `monthlyInstallmentsEnabled` - This flag allows you to specify if months without interest will be active.
        should("test monthlyInstallmentsEnabled") {
            // uncomment below to test the property
            //modelInstance.monthlyInstallmentsEnabled shouldBe ("TODO")
        }

        // to test the property `monthlyInstallmentsOptions` - This field allows you to specify the number of months without interest.
        should("test monthlyInstallmentsOptions") {
            // uncomment below to test the property
            //modelInstance.monthlyInstallmentsOptions shouldBe ("TODO")
        }

        // to test the property `needsShippingContact` - This flag allows you to fill in the shipping information at checkout.
        should("test needsShippingContact") {
            // uncomment below to test the property
            //modelInstance.needsShippingContact shouldBe ("TODO")
        }

        // to test the property `onDemandEnabled` - This flag allows you to specify if the link will be on demand.
        should("test onDemandEnabled") {
            // uncomment below to test the property
            //modelInstance.onDemandEnabled shouldBe ("TODO")
        }

        // to test the property `paymentsLimitCount` - It is the number of payments that can be made through the link.
        should("test paymentsLimitCount") {
            // uncomment below to test the property
            //modelInstance.paymentsLimitCount shouldBe ("TODO")
        }

    }
}
