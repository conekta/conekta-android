/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.conekta.model

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.conekta.model.OrderResponse
import io.conekta.model.ChargeResponseChannel
import io.conekta.model.OrderFiscalEntityResponse
import io.conekta.model.OrderNextActionResponse
import io.conekta.model.OrderResponseCharges
import io.conekta.model.OrderResponseCheckout
import io.conekta.model.OrderResponseCustomerInfo
import io.conekta.model.OrderResponseDiscountLines
import io.conekta.model.OrderResponseProducts
import io.conekta.model.OrderResponseShippingContact

class OrderResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OrderResponse
        //val modelInstance = OrderResponse()

        // to test the property `amount` - The total amount to be collected in cents
        should("test amount") {
            // uncomment below to test the property
            //modelInstance.amount shouldBe ("TODO")
        }

        // to test the property `amountRefunded` - The total amount refunded in cents
        should("test amountRefunded") {
            // uncomment below to test the property
            //modelInstance.amountRefunded shouldBe ("TODO")
        }

        // to test the property `channel`
        should("test channel") {
            // uncomment below to test the property
            //modelInstance.channel shouldBe ("TODO")
        }

        // to test the property `charges`
        should("test charges") {
            // uncomment below to test the property
            //modelInstance.charges shouldBe ("TODO")
        }

        // to test the property `checkout`
        should("test checkout") {
            // uncomment below to test the property
            //modelInstance.checkout shouldBe ("TODO")
        }

        // to test the property `createdAt` - The time at which the object was created in seconds since the Unix epoch
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `currency` - The three-letter ISO 4217 currency code. The currency of the order.
        should("test currency") {
            // uncomment below to test the property
            //modelInstance.currency shouldBe ("TODO")
        }

        // to test the property `customerInfo`
        should("test customerInfo") {
            // uncomment below to test the property
            //modelInstance.customerInfo shouldBe ("TODO")
        }

        // to test the property `discountLines`
        should("test discountLines") {
            // uncomment below to test the property
            //modelInstance.discountLines shouldBe ("TODO")
        }

        // to test the property `fiscalEntity`
        should("test fiscalEntity") {
            // uncomment below to test the property
            //modelInstance.fiscalEntity shouldBe ("TODO")
        }

        // to test the property `id`
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `isRefundable`
        should("test isRefundable") {
            // uncomment below to test the property
            //modelInstance.isRefundable shouldBe ("TODO")
        }

        // to test the property `lineItems`
        should("test lineItems") {
            // uncomment below to test the property
            //modelInstance.lineItems shouldBe ("TODO")
        }

        // to test the property `livemode` - Whether the object exists in live mode or test mode
        should("test livemode") {
            // uncomment below to test the property
            //modelInstance.livemode shouldBe ("TODO")
        }

        // to test the property `metadata` - Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        should("test metadata") {
            // uncomment below to test the property
            //modelInstance.metadata shouldBe ("TODO")
        }

        // to test the property `nextAction`
        should("test nextAction") {
            // uncomment below to test the property
            //modelInstance.nextAction shouldBe ("TODO")
        }

        // to test the property ``object`` - String representing the objectâ€™s type. Objects of the same type share the same value.
        should("test `object`") {
            // uncomment below to test the property
            //modelInstance.`object` shouldBe ("TODO")
        }

        // to test the property `paymentStatus` - The payment status of the order.
        should("test paymentStatus") {
            // uncomment below to test the property
            //modelInstance.paymentStatus shouldBe ("TODO")
        }

        // to test the property `processingMode` - Indicates the processing mode for the order, either ecommerce, recurrent or validation.
        should("test processingMode") {
            // uncomment below to test the property
            //modelInstance.processingMode shouldBe ("TODO")
        }

        // to test the property `shippingContact`
        should("test shippingContact") {
            // uncomment below to test the property
            //modelInstance.shippingContact shouldBe ("TODO")
        }

        // to test the property `updatedAt` - The time at which the object was last updated in seconds since the Unix epoch
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

    }
}
