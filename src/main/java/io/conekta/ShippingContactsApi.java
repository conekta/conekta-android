/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.conekta;

import io.conekta.ApiInvoker;
import io.conekta.ApiException;
import io.conekta.Pair;

import io.conekta.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.conekta.model.CustomerShippingContacts;
import io.conekta.model.CustomerShippingContactsResponse;
import io.conekta.model.CustomerUpdateShippingContacts;
import io.conekta.model.Error;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ShippingContactsApi {
  String basePath = "https://api.conekta.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a shipping contacts
  * Create a shipping contacts for a customer.
   * @param id Identifier of the resource
   * @param customerShippingContacts requested field for customer shippings contacts
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return CustomerShippingContactsResponse
  */
  public CustomerShippingContactsResponse createCustomerShippingContacts (String id, CustomerShippingContacts customerShippingContacts, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = customerShippingContacts;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling createCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'id' when calling createCustomerShippingContacts"));
    }
    // verify the required parameter 'customerShippingContacts' is set
    if (customerShippingContacts == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'customerShippingContacts' when calling createCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'customerShippingContacts' when calling createCustomerShippingContacts"));
    }

    // create path and map variables
    String path = "/customers/{id}/shipping_contacts".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CustomerShippingContactsResponse) ApiInvoker.deserialize(localVarResponse, "", CustomerShippingContactsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a shipping contacts
   * Create a shipping contacts for a customer.
   * @param id Identifier of the resource   * @param customerShippingContacts requested field for customer shippings contacts   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void createCustomerShippingContacts (String id, CustomerShippingContacts customerShippingContacts, String acceptLanguage, String xChildCompanyId, final Response.Listener<CustomerShippingContactsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = customerShippingContacts;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling createCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'id' when calling createCustomerShippingContacts"));
    }
    // verify the required parameter 'customerShippingContacts' is set
    if (customerShippingContacts == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'customerShippingContacts' when calling createCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'customerShippingContacts' when calling createCustomerShippingContacts"));
    }

    // create path and map variables
    String path = "/customers/{id}/shipping_contacts".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CustomerShippingContactsResponse) ApiInvoker.deserialize(localVarResponse,  "", CustomerShippingContactsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete shipping contacts
  * Delete shipping contact that corresponds to a customer ID.
   * @param id Identifier of the resource
   * @param shippingContactsId identifier
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return CustomerShippingContactsResponse
  */
  public CustomerShippingContactsResponse deleteCustomerShippingContacts (String id, String shippingContactsId, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteCustomerShippingContacts"));
    }
    // verify the required parameter 'shippingContactsId' is set
    if (shippingContactsId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shippingContactsId' when calling deleteCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'shippingContactsId' when calling deleteCustomerShippingContacts"));
    }

    // create path and map variables
    String path = "/customers/{id}/shipping_contacts/{shipping_contacts_id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "shipping_contacts_id" + "\\}", apiInvoker.escapeString(shippingContactsId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CustomerShippingContactsResponse) ApiInvoker.deserialize(localVarResponse, "", CustomerShippingContactsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete shipping contacts
   * Delete shipping contact that corresponds to a customer ID.
   * @param id Identifier of the resource   * @param shippingContactsId identifier   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void deleteCustomerShippingContacts (String id, String shippingContactsId, String acceptLanguage, String xChildCompanyId, final Response.Listener<CustomerShippingContactsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteCustomerShippingContacts"));
    }
    // verify the required parameter 'shippingContactsId' is set
    if (shippingContactsId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shippingContactsId' when calling deleteCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'shippingContactsId' when calling deleteCustomerShippingContacts"));
    }

    // create path and map variables
    String path = "/customers/{id}/shipping_contacts/{shipping_contacts_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "shipping_contacts_id" + "\\}", apiInvoker.escapeString(shippingContactsId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CustomerShippingContactsResponse) ApiInvoker.deserialize(localVarResponse,  "", CustomerShippingContactsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update shipping contacts
  * Update shipping contact that corresponds to a customer ID.
   * @param id Identifier of the resource
   * @param shippingContactsId identifier
   * @param customerUpdateShippingContacts requested field for customer update shippings contacts
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return CustomerShippingContactsResponse
  */
  public CustomerShippingContactsResponse updateCustomerShippingContacts (String id, String shippingContactsId, CustomerUpdateShippingContacts customerUpdateShippingContacts, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = customerUpdateShippingContacts;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'id' when calling updateCustomerShippingContacts"));
    }
    // verify the required parameter 'shippingContactsId' is set
    if (shippingContactsId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shippingContactsId' when calling updateCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'shippingContactsId' when calling updateCustomerShippingContacts"));
    }
    // verify the required parameter 'customerUpdateShippingContacts' is set
    if (customerUpdateShippingContacts == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'customerUpdateShippingContacts' when calling updateCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'customerUpdateShippingContacts' when calling updateCustomerShippingContacts"));
    }

    // create path and map variables
    String path = "/customers/{id}/shipping_contacts/{shipping_contacts_id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "shipping_contacts_id" + "\\}", apiInvoker.escapeString(shippingContactsId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CustomerShippingContactsResponse) ApiInvoker.deserialize(localVarResponse, "", CustomerShippingContactsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update shipping contacts
   * Update shipping contact that corresponds to a customer ID.
   * @param id Identifier of the resource   * @param shippingContactsId identifier   * @param customerUpdateShippingContacts requested field for customer update shippings contacts   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void updateCustomerShippingContacts (String id, String shippingContactsId, CustomerUpdateShippingContacts customerUpdateShippingContacts, String acceptLanguage, String xChildCompanyId, final Response.Listener<CustomerShippingContactsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = customerUpdateShippingContacts;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'id' when calling updateCustomerShippingContacts"));
    }
    // verify the required parameter 'shippingContactsId' is set
    if (shippingContactsId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shippingContactsId' when calling updateCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'shippingContactsId' when calling updateCustomerShippingContacts"));
    }
    // verify the required parameter 'customerUpdateShippingContacts' is set
    if (customerUpdateShippingContacts == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'customerUpdateShippingContacts' when calling updateCustomerShippingContacts",
        new ApiException(400, "Missing the required parameter 'customerUpdateShippingContacts' when calling updateCustomerShippingContacts"));
    }

    // create path and map variables
    String path = "/customers/{id}/shipping_contacts/{shipping_contacts_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "shipping_contacts_id" + "\\}", apiInvoker.escapeString(shippingContactsId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CustomerShippingContactsResponse) ApiInvoker.deserialize(localVarResponse,  "", CustomerShippingContactsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
