/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.conekta.model

import io.conekta.model.ChargeRequest
import io.conekta.model.CheckoutRequest
import io.conekta.model.CustomerShippingContacts
import io.conekta.model.OrderDiscountLinesRequest
import io.conekta.model.OrderFiscalEntityRequest
import io.conekta.model.OrderRequestCustomerInfo
import io.conekta.model.OrderTaxRequest
import io.conekta.model.Product
import io.conekta.model.ShippingRequest

import com.google.gson.annotations.SerializedName

/**
 * a order
 *
 * @param currency Currency with which the payment will be made. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)
 * @param customerInfo 
 * @param lineItems List of [products](https://developers.conekta.com/v2.1.0/reference/orderscreateproduct) that are sold in the order. You must have at least one product.
 * @param charges List of [charges](https://developers.conekta.com/v2.1.0/reference/orderscreatecharge) that are applied to the order
 * @param checkout 
 * @param discountLines List of [discounts](https://developers.conekta.com/v2.1.0/reference/orderscreatediscountline) that are applied to the order. You must have at least one discount.
 * @param fiscalEntity 
 * @param metadata Metadata associated with the order
 * @param needsShippingContact Allows you to fill out the shipping information at checkout
 * @param preAuthorize Indicates whether the order charges must be preauthorized
 * @param processingMode Indicates the processing mode for the order, either ecommerce, recurrent or validation.
 * @param returnUrl Indicates the redirection callback upon completion of the 3DS2 flow.
 * @param shippingContact 
 * @param shippingLines List of [shipping costs](https://developers.conekta.com/v2.1.0/reference/orderscreateshipping). If the online store offers digital products.
 * @param taxLines List of [taxes](https://developers.conekta.com/v2.1.0/reference/orderscreatetaxes) that are applied to the order.
 * @param threeDsMode Indicates the 3DS2 mode for the order, either smart or strict.
 */


data class OrderRequest (

    /* Currency with which the payment will be made. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217) */
    @SerializedName("currency")
    val currency: kotlin.String,

    @SerializedName("customer_info")
    val customerInfo: OrderRequestCustomerInfo,

    /* List of [products](https://developers.conekta.com/v2.1.0/reference/orderscreateproduct) that are sold in the order. You must have at least one product. */
    @SerializedName("line_items")
    val lineItems: kotlin.collections.List<Product>,

    /* List of [charges](https://developers.conekta.com/v2.1.0/reference/orderscreatecharge) that are applied to the order */
    @SerializedName("charges")
    val charges: kotlin.collections.List<ChargeRequest>? = null,

    @SerializedName("checkout")
    val checkout: CheckoutRequest? = null,

    /* List of [discounts](https://developers.conekta.com/v2.1.0/reference/orderscreatediscountline) that are applied to the order. You must have at least one discount. */
    @SerializedName("discount_lines")
    val discountLines: kotlin.collections.List<OrderDiscountLinesRequest>? = null,

    @SerializedName("fiscal_entity")
    val fiscalEntity: OrderFiscalEntityRequest? = null,

    /* Metadata associated with the order */
    @SerializedName("metadata")
    val metadata: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    /* Allows you to fill out the shipping information at checkout */
    @SerializedName("needs_shipping_contact")
    val needsShippingContact: kotlin.Boolean? = null,

    /* Indicates whether the order charges must be preauthorized */
    @SerializedName("pre_authorize")
    val preAuthorize: kotlin.Boolean? = false,

    /* Indicates the processing mode for the order, either ecommerce, recurrent or validation. */
    @SerializedName("processing_mode")
    val processingMode: kotlin.String? = null,

    /* Indicates the redirection callback upon completion of the 3DS2 flow. */
    @SerializedName("return_url")
    val returnUrl: java.net.URI? = null,

    @SerializedName("shipping_contact")
    val shippingContact: CustomerShippingContacts? = null,

    /* List of [shipping costs](https://developers.conekta.com/v2.1.0/reference/orderscreateshipping). If the online store offers digital products. */
    @SerializedName("shipping_lines")
    val shippingLines: kotlin.collections.List<ShippingRequest>? = null,

    /* List of [taxes](https://developers.conekta.com/v2.1.0/reference/orderscreatetaxes) that are applied to the order. */
    @SerializedName("tax_lines")
    val taxLines: kotlin.collections.List<OrderTaxRequest>? = null,

    /* Indicates the 3DS2 mode for the order, either smart or strict. */
    @SerializedName("three_ds_mode")
    val threeDsMode: kotlin.String? = null

)

