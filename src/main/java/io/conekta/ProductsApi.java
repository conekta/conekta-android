/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.conekta;

import io.conekta.ApiInvoker;
import io.conekta.ApiException;
import io.conekta.Pair;

import io.conekta.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.conekta.model.Error;
import io.conekta.model.Product;
import io.conekta.model.ProductOrderResponse;
import io.conekta.model.UpdateProduct;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ProductsApi {
  String basePath = "https://api.conekta.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create Product
  * Create a new product for an existing order.
   * @param id Identifier of the resource
   * @param product requested field for a product
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return ProductOrderResponse
  */
  public ProductOrderResponse ordersCreateProduct (String id, Product product, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = product;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling ordersCreateProduct",
        new ApiException(400, "Missing the required parameter 'id' when calling ordersCreateProduct"));
    }
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling ordersCreateProduct",
        new ApiException(400, "Missing the required parameter 'product' when calling ordersCreateProduct"));
    }

    // create path and map variables
    String path = "/orders/{id}/line_items".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductOrderResponse) ApiInvoker.deserialize(localVarResponse, "", ProductOrderResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Product
   * Create a new product for an existing order.
   * @param id Identifier of the resource   * @param product requested field for a product   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void ordersCreateProduct (String id, Product product, String acceptLanguage, String xChildCompanyId, final Response.Listener<ProductOrderResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = product;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling ordersCreateProduct",
        new ApiException(400, "Missing the required parameter 'id' when calling ordersCreateProduct"));
    }
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling ordersCreateProduct",
        new ApiException(400, "Missing the required parameter 'product' when calling ordersCreateProduct"));
    }

    // create path and map variables
    String path = "/orders/{id}/line_items".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductOrderResponse) ApiInvoker.deserialize(localVarResponse,  "", ProductOrderResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Product
  * Delete product for an existing orden
   * @param id Identifier of the resource
   * @param lineItemId identifier
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return ProductOrderResponse
  */
  public ProductOrderResponse ordersDeleteProduct (String id, String lineItemId, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling ordersDeleteProduct",
        new ApiException(400, "Missing the required parameter 'id' when calling ordersDeleteProduct"));
    }
    // verify the required parameter 'lineItemId' is set
    if (lineItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lineItemId' when calling ordersDeleteProduct",
        new ApiException(400, "Missing the required parameter 'lineItemId' when calling ordersDeleteProduct"));
    }

    // create path and map variables
    String path = "/orders/{id}/line_items/{line_item_id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "line_item_id" + "\\}", apiInvoker.escapeString(lineItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductOrderResponse) ApiInvoker.deserialize(localVarResponse, "", ProductOrderResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Product
   * Delete product for an existing orden
   * @param id Identifier of the resource   * @param lineItemId identifier   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void ordersDeleteProduct (String id, String lineItemId, String acceptLanguage, String xChildCompanyId, final Response.Listener<ProductOrderResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling ordersDeleteProduct",
        new ApiException(400, "Missing the required parameter 'id' when calling ordersDeleteProduct"));
    }
    // verify the required parameter 'lineItemId' is set
    if (lineItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lineItemId' when calling ordersDeleteProduct",
        new ApiException(400, "Missing the required parameter 'lineItemId' when calling ordersDeleteProduct"));
    }

    // create path and map variables
    String path = "/orders/{id}/line_items/{line_item_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "line_item_id" + "\\}", apiInvoker.escapeString(lineItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductOrderResponse) ApiInvoker.deserialize(localVarResponse,  "", ProductOrderResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Product
  * Update an existing product for an existing orden
   * @param id Identifier of the resource
   * @param lineItemId identifier
   * @param updateProduct requested field for products
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return ProductOrderResponse
  */
  public ProductOrderResponse ordersUpdateProduct (String id, String lineItemId, UpdateProduct updateProduct, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updateProduct;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling ordersUpdateProduct",
        new ApiException(400, "Missing the required parameter 'id' when calling ordersUpdateProduct"));
    }
    // verify the required parameter 'lineItemId' is set
    if (lineItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lineItemId' when calling ordersUpdateProduct",
        new ApiException(400, "Missing the required parameter 'lineItemId' when calling ordersUpdateProduct"));
    }
    // verify the required parameter 'updateProduct' is set
    if (updateProduct == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateProduct' when calling ordersUpdateProduct",
        new ApiException(400, "Missing the required parameter 'updateProduct' when calling ordersUpdateProduct"));
    }

    // create path and map variables
    String path = "/orders/{id}/line_items/{line_item_id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "line_item_id" + "\\}", apiInvoker.escapeString(lineItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductOrderResponse) ApiInvoker.deserialize(localVarResponse, "", ProductOrderResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Product
   * Update an existing product for an existing orden
   * @param id Identifier of the resource   * @param lineItemId identifier   * @param updateProduct requested field for products   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void ordersUpdateProduct (String id, String lineItemId, UpdateProduct updateProduct, String acceptLanguage, String xChildCompanyId, final Response.Listener<ProductOrderResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updateProduct;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling ordersUpdateProduct",
        new ApiException(400, "Missing the required parameter 'id' when calling ordersUpdateProduct"));
    }
    // verify the required parameter 'lineItemId' is set
    if (lineItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lineItemId' when calling ordersUpdateProduct",
        new ApiException(400, "Missing the required parameter 'lineItemId' when calling ordersUpdateProduct"));
    }
    // verify the required parameter 'updateProduct' is set
    if (updateProduct == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateProduct' when calling ordersUpdateProduct",
        new ApiException(400, "Missing the required parameter 'updateProduct' when calling ordersUpdateProduct"));
    }

    // create path and map variables
    String path = "/orders/{id}/line_items/{line_item_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "line_item_id" + "\\}", apiInvoker.escapeString(lineItemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductOrderResponse) ApiInvoker.deserialize(localVarResponse,  "", ProductOrderResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
