/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.conekta;

import io.conekta.ApiInvoker;
import io.conekta.ApiException;
import io.conekta.Pair;

import io.conekta.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.conekta.model.CreateCustomerFiscalEntitiesResponse;
import io.conekta.model.Customer;
import io.conekta.model.CustomerFiscalEntitiesRequest;
import io.conekta.model.CustomerResponse;
import io.conekta.model.CustomerUpdateFiscalEntitiesRequest;
import io.conekta.model.CustomersResponse;
import io.conekta.model.Error;
import io.conekta.model.UpdateCustomer;
import io.conekta.model.UpdateCustomerFiscalEntitiesResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CustomersApi {
  String basePath = "https://api.conekta.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create customer
  * The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer) 
   * @param customer requested field for customer
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return CustomerResponse
  */
  public CustomerResponse createCustomer (Customer customer, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = customer;
    // verify the required parameter 'customer' is set
    if (customer == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'customer' when calling createCustomer",
        new ApiException(400, "Missing the required parameter 'customer' when calling createCustomer"));
    }

    // create path and map variables
    String path = "/customers";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CustomerResponse) ApiInvoker.deserialize(localVarResponse, "", CustomerResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create customer
   * The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer) 
   * @param customer requested field for customer   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void createCustomer (Customer customer, String acceptLanguage, String xChildCompanyId, final Response.Listener<CustomerResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = customer;

    // verify the required parameter 'customer' is set
    if (customer == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'customer' when calling createCustomer",
        new ApiException(400, "Missing the required parameter 'customer' when calling createCustomer"));
    }

    // create path and map variables
    String path = "/customers".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CustomerResponse) ApiInvoker.deserialize(localVarResponse,  "", CustomerResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Fiscal Entity
  * Create Fiscal entity resource that corresponds to a customer ID.
   * @param id Identifier of the resource
   * @param customerFiscalEntitiesRequest requested field for customer fiscal entities
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return CreateCustomerFiscalEntitiesResponse
  */
  public CreateCustomerFiscalEntitiesResponse createCustomerFiscalEntities (String id, CustomerFiscalEntitiesRequest customerFiscalEntitiesRequest, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = customerFiscalEntitiesRequest;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling createCustomerFiscalEntities",
        new ApiException(400, "Missing the required parameter 'id' when calling createCustomerFiscalEntities"));
    }
    // verify the required parameter 'customerFiscalEntitiesRequest' is set
    if (customerFiscalEntitiesRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'customerFiscalEntitiesRequest' when calling createCustomerFiscalEntities",
        new ApiException(400, "Missing the required parameter 'customerFiscalEntitiesRequest' when calling createCustomerFiscalEntities"));
    }

    // create path and map variables
    String path = "/customers/{id}/fiscal_entities".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateCustomerFiscalEntitiesResponse) ApiInvoker.deserialize(localVarResponse, "", CreateCustomerFiscalEntitiesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Fiscal Entity
   * Create Fiscal entity resource that corresponds to a customer ID.
   * @param id Identifier of the resource   * @param customerFiscalEntitiesRequest requested field for customer fiscal entities   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void createCustomerFiscalEntities (String id, CustomerFiscalEntitiesRequest customerFiscalEntitiesRequest, String acceptLanguage, String xChildCompanyId, final Response.Listener<CreateCustomerFiscalEntitiesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = customerFiscalEntitiesRequest;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling createCustomerFiscalEntities",
        new ApiException(400, "Missing the required parameter 'id' when calling createCustomerFiscalEntities"));
    }
    // verify the required parameter 'customerFiscalEntitiesRequest' is set
    if (customerFiscalEntitiesRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'customerFiscalEntitiesRequest' when calling createCustomerFiscalEntities",
        new ApiException(400, "Missing the required parameter 'customerFiscalEntitiesRequest' when calling createCustomerFiscalEntities"));
    }

    // create path and map variables
    String path = "/customers/{id}/fiscal_entities".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateCustomerFiscalEntitiesResponse) ApiInvoker.deserialize(localVarResponse,  "", CreateCustomerFiscalEntitiesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Customer
  * Deleted a customer resource that corresponds to a customer ID.
   * @param id Identifier of the resource
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return CustomerResponse
  */
  public CustomerResponse deleteCustomerById (String id, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteCustomerById",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteCustomerById"));
    }

    // create path and map variables
    String path = "/customers/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CustomerResponse) ApiInvoker.deserialize(localVarResponse, "", CustomerResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Customer
   * Deleted a customer resource that corresponds to a customer ID.
   * @param id Identifier of the resource   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void deleteCustomerById (String id, String acceptLanguage, String xChildCompanyId, final Response.Listener<CustomerResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteCustomerById",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteCustomerById"));
    }

    // create path and map variables
    String path = "/customers/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CustomerResponse) ApiInvoker.deserialize(localVarResponse,  "", CustomerResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Customer
  * Gets a customer resource that corresponds to a customer ID.
   * @param id Identifier of the resource
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return CustomerResponse
  */
  public CustomerResponse getCustomerById (String id, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getCustomerById",
        new ApiException(400, "Missing the required parameter 'id' when calling getCustomerById"));
    }

    // create path and map variables
    String path = "/customers/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CustomerResponse) ApiInvoker.deserialize(localVarResponse, "", CustomerResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Customer
   * Gets a customer resource that corresponds to a customer ID.
   * @param id Identifier of the resource   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void getCustomerById (String id, String acceptLanguage, String xChildCompanyId, final Response.Listener<CustomerResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getCustomerById",
        new ApiException(400, "Missing the required parameter 'id' when calling getCustomerById"));
    }

    // create path and map variables
    String path = "/customers/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CustomerResponse) ApiInvoker.deserialize(localVarResponse,  "", CustomerResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a list of customers
  * The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @param limit The numbers of items to return, the maximum value is 250
   * @param search General order search, e.g. by mail, reference etc.
   * @param next next page
   * @param previous previous page
   * @return CustomersResponse
  */
  public CustomersResponse getCustomers (String acceptLanguage, String xChildCompanyId, Integer limit, String search, String next, String previous) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/customers";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "next", next));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "previous", previous));
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CustomersResponse) ApiInvoker.deserialize(localVarResponse, "", CustomersResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a list of customers
   * The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.   * @param limit The numbers of items to return, the maximum value is 250   * @param search General order search, e.g. by mail, reference etc.   * @param next next page   * @param previous previous page
  */
  public void getCustomers (String acceptLanguage, String xChildCompanyId, Integer limit, String search, String next, String previous, final Response.Listener<CustomersResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/customers".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "next", next));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "previous", previous));

    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CustomersResponse) ApiInvoker.deserialize(localVarResponse,  "", CustomersResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update customer
  * You can update customer-related data
   * @param id Identifier of the resource
   * @param updateCustomer requested field for customer
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return CustomerResponse
  */
  public CustomerResponse updateCustomer (String id, UpdateCustomer updateCustomer, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updateCustomer;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateCustomer",
        new ApiException(400, "Missing the required parameter 'id' when calling updateCustomer"));
    }
    // verify the required parameter 'updateCustomer' is set
    if (updateCustomer == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateCustomer' when calling updateCustomer",
        new ApiException(400, "Missing the required parameter 'updateCustomer' when calling updateCustomer"));
    }

    // create path and map variables
    String path = "/customers/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CustomerResponse) ApiInvoker.deserialize(localVarResponse, "", CustomerResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update customer
   * You can update customer-related data
   * @param id Identifier of the resource   * @param updateCustomer requested field for customer   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void updateCustomer (String id, UpdateCustomer updateCustomer, String acceptLanguage, String xChildCompanyId, final Response.Listener<CustomerResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updateCustomer;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateCustomer",
        new ApiException(400, "Missing the required parameter 'id' when calling updateCustomer"));
    }
    // verify the required parameter 'updateCustomer' is set
    if (updateCustomer == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateCustomer' when calling updateCustomer",
        new ApiException(400, "Missing the required parameter 'updateCustomer' when calling updateCustomer"));
    }

    // create path and map variables
    String path = "/customers/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CustomerResponse) ApiInvoker.deserialize(localVarResponse,  "", CustomerResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update  Fiscal Entity
  * Update Fiscal Entity resource that corresponds to a customer ID.
   * @param id Identifier of the resource
   * @param fiscalEntitiesId identifier
   * @param customerUpdateFiscalEntitiesRequest requested field for customer update fiscal entities
   * @param acceptLanguage Use for knowing which language to use
   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
   * @return UpdateCustomerFiscalEntitiesResponse
  */
  public UpdateCustomerFiscalEntitiesResponse updateCustomerFiscalEntities (String id, String fiscalEntitiesId, CustomerUpdateFiscalEntitiesRequest customerUpdateFiscalEntitiesRequest, String acceptLanguage, String xChildCompanyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = customerUpdateFiscalEntitiesRequest;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateCustomerFiscalEntities",
        new ApiException(400, "Missing the required parameter 'id' when calling updateCustomerFiscalEntities"));
    }
    // verify the required parameter 'fiscalEntitiesId' is set
    if (fiscalEntitiesId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fiscalEntitiesId' when calling updateCustomerFiscalEntities",
        new ApiException(400, "Missing the required parameter 'fiscalEntitiesId' when calling updateCustomerFiscalEntities"));
    }
    // verify the required parameter 'customerUpdateFiscalEntitiesRequest' is set
    if (customerUpdateFiscalEntitiesRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'customerUpdateFiscalEntitiesRequest' when calling updateCustomerFiscalEntities",
        new ApiException(400, "Missing the required parameter 'customerUpdateFiscalEntitiesRequest' when calling updateCustomerFiscalEntities"));
    }

    // create path and map variables
    String path = "/customers/{id}/fiscal_entities/{fiscal_entities_id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "fiscal_entities_id" + "\\}", apiInvoker.escapeString(fiscalEntitiesId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UpdateCustomerFiscalEntitiesResponse) ApiInvoker.deserialize(localVarResponse, "", UpdateCustomerFiscalEntitiesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update  Fiscal Entity
   * Update Fiscal Entity resource that corresponds to a customer ID.
   * @param id Identifier of the resource   * @param fiscalEntitiesId identifier   * @param customerUpdateFiscalEntitiesRequest requested field for customer update fiscal entities   * @param acceptLanguage Use for knowing which language to use   * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request.
  */
  public void updateCustomerFiscalEntities (String id, String fiscalEntitiesId, CustomerUpdateFiscalEntitiesRequest customerUpdateFiscalEntitiesRequest, String acceptLanguage, String xChildCompanyId, final Response.Listener<UpdateCustomerFiscalEntitiesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = customerUpdateFiscalEntitiesRequest;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateCustomerFiscalEntities",
        new ApiException(400, "Missing the required parameter 'id' when calling updateCustomerFiscalEntities"));
    }
    // verify the required parameter 'fiscalEntitiesId' is set
    if (fiscalEntitiesId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fiscalEntitiesId' when calling updateCustomerFiscalEntities",
        new ApiException(400, "Missing the required parameter 'fiscalEntitiesId' when calling updateCustomerFiscalEntities"));
    }
    // verify the required parameter 'customerUpdateFiscalEntitiesRequest' is set
    if (customerUpdateFiscalEntitiesRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'customerUpdateFiscalEntitiesRequest' when calling updateCustomerFiscalEntities",
        new ApiException(400, "Missing the required parameter 'customerUpdateFiscalEntitiesRequest' when calling updateCustomerFiscalEntities"));
    }

    // create path and map variables
    String path = "/customers/{id}/fiscal_entities/{fiscal_entities_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "fiscal_entities_id" + "\\}", apiInvoker.escapeString(fiscalEntitiesId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept-Language", ApiInvoker.parameterToString(acceptLanguage));
    headerParams.put("X-Child-Company-Id", ApiInvoker.parameterToString(xChildCompanyId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UpdateCustomerFiscalEntitiesResponse) ApiInvoker.deserialize(localVarResponse,  "", UpdateCustomerFiscalEntitiesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
