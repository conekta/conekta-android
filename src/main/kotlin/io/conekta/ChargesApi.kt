/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.conekta

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.conekta.model.ChargeOrderResponse
import io.conekta.model.ChargeRequest
import io.conekta.model.ChargeResponse
import io.conekta.model.ChargeUpdateRequest
import io.conekta.model.Error
import io.conekta.model.GetChargesResponse

import com.google.gson.annotations.SerializedName

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ChargesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.conekta.io")
        }
    }

    /**
     * enum for parameter acceptLanguage
     */
     enum class AcceptLanguageGetCharges(val value: kotlin.String) {
         @SerializedName(value = "es") es("es"),
         @SerializedName(value = "en") en("en")
     }

    /**
     * Get A List of Charges
     * 
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @param limit The numbers of items to return, the maximum value is 250 (optional, default to 20)
     * @param search General order search, e.g. by mail, reference etc. (optional)
     * @param next next page (optional)
     * @param previous previous page (optional)
     * @return GetChargesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCharges(acceptLanguage: AcceptLanguageGetCharges? = AcceptLanguageGetCharges.es, xChildCompanyId: kotlin.String? = null, limit: kotlin.Int? = 20, search: kotlin.String? = null, next: kotlin.String? = null, previous: kotlin.String? = null) : GetChargesResponse {
        val localVarResponse = getChargesWithHttpInfo(acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId, limit = limit, search = search, next = next, previous = previous)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetChargesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get A List of Charges
     * 
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @param limit The numbers of items to return, the maximum value is 250 (optional, default to 20)
     * @param search General order search, e.g. by mail, reference etc. (optional)
     * @param next next page (optional)
     * @param previous previous page (optional)
     * @return ApiResponse<GetChargesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getChargesWithHttpInfo(acceptLanguage: AcceptLanguageGetCharges?, xChildCompanyId: kotlin.String?, limit: kotlin.Int?, search: kotlin.String?, next: kotlin.String?, previous: kotlin.String?) : ApiResponse<GetChargesResponse?> {
        val localVariableConfig = getChargesRequestConfig(acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId, limit = limit, search = search, next = next, previous = previous)

        return request<Unit, GetChargesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCharges
     *
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @param limit The numbers of items to return, the maximum value is 250 (optional, default to 20)
     * @param search General order search, e.g. by mail, reference etc. (optional)
     * @param next next page (optional)
     * @param previous previous page (optional)
     * @return RequestConfig
     */
    fun getChargesRequestConfig(acceptLanguage: AcceptLanguageGetCharges?, xChildCompanyId: kotlin.String?, limit: kotlin.Int?, search: kotlin.String?, next: kotlin.String?, previous: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (search != null) {
                    put("search", listOf(search.toString()))
                }
                if (next != null) {
                    put("next", listOf(next.toString()))
                }
                if (previous != null) {
                    put("previous", listOf(previous.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        xChildCompanyId?.apply { localVariableHeaders["X-Child-Company-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/vnd.conekta-v2.1.0+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/charges",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter acceptLanguage
     */
     enum class AcceptLanguageOrdersCreateCharge(val value: kotlin.String) {
         @SerializedName(value = "es") es("es"),
         @SerializedName(value = "en") en("en")
     }

    /**
     * Create charge
     * Create charge for an existing orden
     * @param id Identifier of the resource
     * @param chargeRequest requested field for a charge
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return ChargeOrderResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ordersCreateCharge(id: kotlin.String, chargeRequest: ChargeRequest, acceptLanguage: AcceptLanguageOrdersCreateCharge? = AcceptLanguageOrdersCreateCharge.es, xChildCompanyId: kotlin.String? = null) : ChargeOrderResponse {
        val localVarResponse = ordersCreateChargeWithHttpInfo(id = id, chargeRequest = chargeRequest, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChargeOrderResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create charge
     * Create charge for an existing orden
     * @param id Identifier of the resource
     * @param chargeRequest requested field for a charge
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return ApiResponse<ChargeOrderResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ordersCreateChargeWithHttpInfo(id: kotlin.String, chargeRequest: ChargeRequest, acceptLanguage: AcceptLanguageOrdersCreateCharge?, xChildCompanyId: kotlin.String?) : ApiResponse<ChargeOrderResponse?> {
        val localVariableConfig = ordersCreateChargeRequestConfig(id = id, chargeRequest = chargeRequest, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return request<ChargeRequest, ChargeOrderResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ordersCreateCharge
     *
     * @param id Identifier of the resource
     * @param chargeRequest requested field for a charge
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return RequestConfig
     */
    fun ordersCreateChargeRequestConfig(id: kotlin.String, chargeRequest: ChargeRequest, acceptLanguage: AcceptLanguageOrdersCreateCharge?, xChildCompanyId: kotlin.String?) : RequestConfig<ChargeRequest> {
        val localVariableBody = chargeRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        xChildCompanyId?.apply { localVariableHeaders["X-Child-Company-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/vnd.conekta-v2.1.0+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/orders/{id}/charges".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter acceptLanguage
     */
     enum class AcceptLanguageUpdateCharge(val value: kotlin.String) {
         @SerializedName(value = "es") es("es"),
         @SerializedName(value = "en") en("en")
     }

    /**
     * Update a charge
     * 
     * @param id Identifier of the resource
     * @param chargeUpdateRequest requested field for update a charge
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return ChargeResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateCharge(id: kotlin.String, chargeUpdateRequest: ChargeUpdateRequest, acceptLanguage: AcceptLanguageUpdateCharge? = AcceptLanguageUpdateCharge.es, xChildCompanyId: kotlin.String? = null) : ChargeResponse {
        val localVarResponse = updateChargeWithHttpInfo(id = id, chargeUpdateRequest = chargeUpdateRequest, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChargeResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a charge
     * 
     * @param id Identifier of the resource
     * @param chargeUpdateRequest requested field for update a charge
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return ApiResponse<ChargeResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateChargeWithHttpInfo(id: kotlin.String, chargeUpdateRequest: ChargeUpdateRequest, acceptLanguage: AcceptLanguageUpdateCharge?, xChildCompanyId: kotlin.String?) : ApiResponse<ChargeResponse?> {
        val localVariableConfig = updateChargeRequestConfig(id = id, chargeUpdateRequest = chargeUpdateRequest, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return request<ChargeUpdateRequest, ChargeResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateCharge
     *
     * @param id Identifier of the resource
     * @param chargeUpdateRequest requested field for update a charge
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return RequestConfig
     */
    fun updateChargeRequestConfig(id: kotlin.String, chargeUpdateRequest: ChargeUpdateRequest, acceptLanguage: AcceptLanguageUpdateCharge?, xChildCompanyId: kotlin.String?) : RequestConfig<ChargeUpdateRequest> {
        val localVariableBody = chargeUpdateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        xChildCompanyId?.apply { localVariableHeaders["X-Child-Company-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/vnd.conekta-v2.1.0+json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/charges/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
