/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.conekta.model


import com.google.gson.annotations.SerializedName

/**
 * The Transaction object represents the actions or steps of an order. Statuses can be: unprocessed, pending, available, owen, paid_out, voided, capture, capture_reversal, liquidation, liquidation_reversal, payout, payout_reversal, refund, refund_reversal, chargeback, chargeback_reversal, rounding_adjustment, won_chargeback, transferred, and transferred.
 *
 * @param amount The amount of the transaction.
 * @param charge Randomly assigned unique order identifier associated with the charge.
 * @param createdAt Date and time of creation of the transaction in Unix format.
 * @param currency The currency of the transaction. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)
 * @param fee The amount to be deducted for taxes and commissions.
 * @param id Unique identifier of the transaction.
 * @param livemode Indicates whether the transaction was created in live mode or test mode.
 * @param net The net amount after deducting commissions and taxes.
 * @param `object` Object name, which is transaction.
 * @param status Code indicating transaction status.
 * @param type Transaction Type
 */


data class TransactionResponse (

    /* The amount of the transaction. */
    @SerializedName("amount")
    val amount: kotlin.Long,

    /* Randomly assigned unique order identifier associated with the charge. */
    @SerializedName("charge")
    val charge: kotlin.String,

    /* Date and time of creation of the transaction in Unix format. */
    @SerializedName("created_at")
    val createdAt: kotlin.Long,

    /* The currency of the transaction. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217) */
    @SerializedName("currency")
    val currency: kotlin.String,

    /* The amount to be deducted for taxes and commissions. */
    @SerializedName("fee")
    val fee: kotlin.Long,

    /* Unique identifier of the transaction. */
    @SerializedName("id")
    val id: kotlin.String,

    /* Indicates whether the transaction was created in live mode or test mode. */
    @SerializedName("livemode")
    val livemode: kotlin.Boolean,

    /* The net amount after deducting commissions and taxes. */
    @SerializedName("net")
    val net: kotlin.Long,

    /* Object name, which is transaction. */
    @SerializedName("object")
    val `object`: kotlin.String,

    /* Code indicating transaction status. */
    @SerializedName("status")
    val status: kotlin.String,

    /* Transaction Type */
    @SerializedName("type")
    val type: kotlin.String

)

