/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.conekta

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.conekta.model.CustomerShippingContacts
import io.conekta.model.CustomerShippingContactsResponse
import io.conekta.model.CustomerUpdateShippingContacts
import io.conekta.model.Error

import com.google.gson.annotations.SerializedName

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ShippingContactsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.conekta.io")
        }
    }

    /**
     * enum for parameter acceptLanguage
     */
     enum class AcceptLanguageCreateCustomerShippingContacts(val value: kotlin.String) {
         @SerializedName(value = "es") es("es"),
         @SerializedName(value = "en") en("en")
     }

    /**
     * Create a shipping contacts
     * Create a shipping contacts for a customer.
     * @param id Identifier of the resource
     * @param customerShippingContacts requested field for customer shippings contacts
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return CustomerShippingContactsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createCustomerShippingContacts(id: kotlin.String, customerShippingContacts: CustomerShippingContacts, acceptLanguage: AcceptLanguageCreateCustomerShippingContacts? = AcceptLanguageCreateCustomerShippingContacts.es, xChildCompanyId: kotlin.String? = null) : CustomerShippingContactsResponse {
        val localVarResponse = createCustomerShippingContactsWithHttpInfo(id = id, customerShippingContacts = customerShippingContacts, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CustomerShippingContactsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a shipping contacts
     * Create a shipping contacts for a customer.
     * @param id Identifier of the resource
     * @param customerShippingContacts requested field for customer shippings contacts
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return ApiResponse<CustomerShippingContactsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createCustomerShippingContactsWithHttpInfo(id: kotlin.String, customerShippingContacts: CustomerShippingContacts, acceptLanguage: AcceptLanguageCreateCustomerShippingContacts?, xChildCompanyId: kotlin.String?) : ApiResponse<CustomerShippingContactsResponse?> {
        val localVariableConfig = createCustomerShippingContactsRequestConfig(id = id, customerShippingContacts = customerShippingContacts, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return request<CustomerShippingContacts, CustomerShippingContactsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createCustomerShippingContacts
     *
     * @param id Identifier of the resource
     * @param customerShippingContacts requested field for customer shippings contacts
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return RequestConfig
     */
    fun createCustomerShippingContactsRequestConfig(id: kotlin.String, customerShippingContacts: CustomerShippingContacts, acceptLanguage: AcceptLanguageCreateCustomerShippingContacts?, xChildCompanyId: kotlin.String?) : RequestConfig<CustomerShippingContacts> {
        val localVariableBody = customerShippingContacts
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        xChildCompanyId?.apply { localVariableHeaders["X-Child-Company-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/vnd.conekta-v2.1.0+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/customers/{id}/shipping_contacts".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter acceptLanguage
     */
     enum class AcceptLanguageDeleteCustomerShippingContacts(val value: kotlin.String) {
         @SerializedName(value = "es") es("es"),
         @SerializedName(value = "en") en("en")
     }

    /**
     * Delete shipping contacts
     * Delete shipping contact that corresponds to a customer ID.
     * @param id Identifier of the resource
     * @param shippingContactsId identifier
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return CustomerShippingContactsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteCustomerShippingContacts(id: kotlin.String, shippingContactsId: kotlin.String, acceptLanguage: AcceptLanguageDeleteCustomerShippingContacts? = AcceptLanguageDeleteCustomerShippingContacts.es, xChildCompanyId: kotlin.String? = null) : CustomerShippingContactsResponse {
        val localVarResponse = deleteCustomerShippingContactsWithHttpInfo(id = id, shippingContactsId = shippingContactsId, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CustomerShippingContactsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete shipping contacts
     * Delete shipping contact that corresponds to a customer ID.
     * @param id Identifier of the resource
     * @param shippingContactsId identifier
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return ApiResponse<CustomerShippingContactsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteCustomerShippingContactsWithHttpInfo(id: kotlin.String, shippingContactsId: kotlin.String, acceptLanguage: AcceptLanguageDeleteCustomerShippingContacts?, xChildCompanyId: kotlin.String?) : ApiResponse<CustomerShippingContactsResponse?> {
        val localVariableConfig = deleteCustomerShippingContactsRequestConfig(id = id, shippingContactsId = shippingContactsId, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return request<Unit, CustomerShippingContactsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteCustomerShippingContacts
     *
     * @param id Identifier of the resource
     * @param shippingContactsId identifier
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return RequestConfig
     */
    fun deleteCustomerShippingContactsRequestConfig(id: kotlin.String, shippingContactsId: kotlin.String, acceptLanguage: AcceptLanguageDeleteCustomerShippingContacts?, xChildCompanyId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        xChildCompanyId?.apply { localVariableHeaders["X-Child-Company-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/vnd.conekta-v2.1.0+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/customers/{id}/shipping_contacts/{shipping_contacts_id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"shipping_contacts_id"+"}", encodeURIComponent(shippingContactsId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter acceptLanguage
     */
     enum class AcceptLanguageUpdateCustomerShippingContacts(val value: kotlin.String) {
         @SerializedName(value = "es") es("es"),
         @SerializedName(value = "en") en("en")
     }

    /**
     * Update shipping contacts
     * Update shipping contact that corresponds to a customer ID.
     * @param id Identifier of the resource
     * @param shippingContactsId identifier
     * @param customerUpdateShippingContacts requested field for customer update shippings contacts
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return CustomerShippingContactsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateCustomerShippingContacts(id: kotlin.String, shippingContactsId: kotlin.String, customerUpdateShippingContacts: CustomerUpdateShippingContacts, acceptLanguage: AcceptLanguageUpdateCustomerShippingContacts? = AcceptLanguageUpdateCustomerShippingContacts.es, xChildCompanyId: kotlin.String? = null) : CustomerShippingContactsResponse {
        val localVarResponse = updateCustomerShippingContactsWithHttpInfo(id = id, shippingContactsId = shippingContactsId, customerUpdateShippingContacts = customerUpdateShippingContacts, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CustomerShippingContactsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update shipping contacts
     * Update shipping contact that corresponds to a customer ID.
     * @param id Identifier of the resource
     * @param shippingContactsId identifier
     * @param customerUpdateShippingContacts requested field for customer update shippings contacts
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return ApiResponse<CustomerShippingContactsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateCustomerShippingContactsWithHttpInfo(id: kotlin.String, shippingContactsId: kotlin.String, customerUpdateShippingContacts: CustomerUpdateShippingContacts, acceptLanguage: AcceptLanguageUpdateCustomerShippingContacts?, xChildCompanyId: kotlin.String?) : ApiResponse<CustomerShippingContactsResponse?> {
        val localVariableConfig = updateCustomerShippingContactsRequestConfig(id = id, shippingContactsId = shippingContactsId, customerUpdateShippingContacts = customerUpdateShippingContacts, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return request<CustomerUpdateShippingContacts, CustomerShippingContactsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateCustomerShippingContacts
     *
     * @param id Identifier of the resource
     * @param shippingContactsId identifier
     * @param customerUpdateShippingContacts requested field for customer update shippings contacts
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return RequestConfig
     */
    fun updateCustomerShippingContactsRequestConfig(id: kotlin.String, shippingContactsId: kotlin.String, customerUpdateShippingContacts: CustomerUpdateShippingContacts, acceptLanguage: AcceptLanguageUpdateCustomerShippingContacts?, xChildCompanyId: kotlin.String?) : RequestConfig<CustomerUpdateShippingContacts> {
        val localVariableBody = customerUpdateShippingContacts
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        xChildCompanyId?.apply { localVariableHeaders["X-Child-Company-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/vnd.conekta-v2.1.0+json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/customers/{id}/shipping_contacts/{shipping_contacts_id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"shipping_contacts_id"+"}", encodeURIComponent(shippingContactsId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
