/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.conekta

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.conekta.model.Error
import io.conekta.model.OrderTaxRequest
import io.conekta.model.UpdateOrderTaxRequest
import io.conekta.model.UpdateOrderTaxResponse

import com.google.gson.annotations.SerializedName

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class TaxesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.conekta.io")
        }
    }

    /**
     * enum for parameter acceptLanguage
     */
     enum class AcceptLanguageOrdersCreateTaxes(val value: kotlin.String) {
         @SerializedName(value = "es") es("es"),
         @SerializedName(value = "en") en("en")
     }

    /**
     * Create Tax
     * Create new taxes for an existing orden
     * @param id Identifier of the resource
     * @param orderTaxRequest requested field for a taxes
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return UpdateOrderTaxResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ordersCreateTaxes(id: kotlin.String, orderTaxRequest: OrderTaxRequest, acceptLanguage: AcceptLanguageOrdersCreateTaxes? = AcceptLanguageOrdersCreateTaxes.es, xChildCompanyId: kotlin.String? = null) : UpdateOrderTaxResponse {
        val localVarResponse = ordersCreateTaxesWithHttpInfo(id = id, orderTaxRequest = orderTaxRequest, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateOrderTaxResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Tax
     * Create new taxes for an existing orden
     * @param id Identifier of the resource
     * @param orderTaxRequest requested field for a taxes
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return ApiResponse<UpdateOrderTaxResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ordersCreateTaxesWithHttpInfo(id: kotlin.String, orderTaxRequest: OrderTaxRequest, acceptLanguage: AcceptLanguageOrdersCreateTaxes?, xChildCompanyId: kotlin.String?) : ApiResponse<UpdateOrderTaxResponse?> {
        val localVariableConfig = ordersCreateTaxesRequestConfig(id = id, orderTaxRequest = orderTaxRequest, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return request<OrderTaxRequest, UpdateOrderTaxResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ordersCreateTaxes
     *
     * @param id Identifier of the resource
     * @param orderTaxRequest requested field for a taxes
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return RequestConfig
     */
    fun ordersCreateTaxesRequestConfig(id: kotlin.String, orderTaxRequest: OrderTaxRequest, acceptLanguage: AcceptLanguageOrdersCreateTaxes?, xChildCompanyId: kotlin.String?) : RequestConfig<OrderTaxRequest> {
        val localVariableBody = orderTaxRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        xChildCompanyId?.apply { localVariableHeaders["X-Child-Company-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/vnd.conekta-v2.1.0+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/orders/{id}/tax_lines".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter acceptLanguage
     */
     enum class AcceptLanguageOrdersDeleteTaxes(val value: kotlin.String) {
         @SerializedName(value = "es") es("es"),
         @SerializedName(value = "en") en("en")
     }

    /**
     * Delete Tax
     * Delete taxes for an existing orden
     * @param id Identifier of the resource
     * @param taxId identifier
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return UpdateOrderTaxResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ordersDeleteTaxes(id: kotlin.String, taxId: kotlin.String, acceptLanguage: AcceptLanguageOrdersDeleteTaxes? = AcceptLanguageOrdersDeleteTaxes.es, xChildCompanyId: kotlin.String? = null) : UpdateOrderTaxResponse {
        val localVarResponse = ordersDeleteTaxesWithHttpInfo(id = id, taxId = taxId, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateOrderTaxResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Tax
     * Delete taxes for an existing orden
     * @param id Identifier of the resource
     * @param taxId identifier
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return ApiResponse<UpdateOrderTaxResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ordersDeleteTaxesWithHttpInfo(id: kotlin.String, taxId: kotlin.String, acceptLanguage: AcceptLanguageOrdersDeleteTaxes?, xChildCompanyId: kotlin.String?) : ApiResponse<UpdateOrderTaxResponse?> {
        val localVariableConfig = ordersDeleteTaxesRequestConfig(id = id, taxId = taxId, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return request<Unit, UpdateOrderTaxResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ordersDeleteTaxes
     *
     * @param id Identifier of the resource
     * @param taxId identifier
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return RequestConfig
     */
    fun ordersDeleteTaxesRequestConfig(id: kotlin.String, taxId: kotlin.String, acceptLanguage: AcceptLanguageOrdersDeleteTaxes?, xChildCompanyId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        xChildCompanyId?.apply { localVariableHeaders["X-Child-Company-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/vnd.conekta-v2.1.0+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/orders/{id}/tax_lines/{tax_id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"tax_id"+"}", encodeURIComponent(taxId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter acceptLanguage
     */
     enum class AcceptLanguageOrdersUpdateTaxes(val value: kotlin.String) {
         @SerializedName(value = "es") es("es"),
         @SerializedName(value = "en") en("en")
     }

    /**
     * Update Tax
     * Update taxes for an existing orden
     * @param id Identifier of the resource
     * @param taxId identifier
     * @param updateOrderTaxRequest requested field for taxes
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return UpdateOrderTaxResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ordersUpdateTaxes(id: kotlin.String, taxId: kotlin.String, updateOrderTaxRequest: UpdateOrderTaxRequest, acceptLanguage: AcceptLanguageOrdersUpdateTaxes? = AcceptLanguageOrdersUpdateTaxes.es, xChildCompanyId: kotlin.String? = null) : UpdateOrderTaxResponse {
        val localVarResponse = ordersUpdateTaxesWithHttpInfo(id = id, taxId = taxId, updateOrderTaxRequest = updateOrderTaxRequest, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateOrderTaxResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Tax
     * Update taxes for an existing orden
     * @param id Identifier of the resource
     * @param taxId identifier
     * @param updateOrderTaxRequest requested field for taxes
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return ApiResponse<UpdateOrderTaxResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ordersUpdateTaxesWithHttpInfo(id: kotlin.String, taxId: kotlin.String, updateOrderTaxRequest: UpdateOrderTaxRequest, acceptLanguage: AcceptLanguageOrdersUpdateTaxes?, xChildCompanyId: kotlin.String?) : ApiResponse<UpdateOrderTaxResponse?> {
        val localVariableConfig = ordersUpdateTaxesRequestConfig(id = id, taxId = taxId, updateOrderTaxRequest = updateOrderTaxRequest, acceptLanguage = acceptLanguage, xChildCompanyId = xChildCompanyId)

        return request<UpdateOrderTaxRequest, UpdateOrderTaxResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ordersUpdateTaxes
     *
     * @param id Identifier of the resource
     * @param taxId identifier
     * @param updateOrderTaxRequest requested field for taxes
     * @param acceptLanguage Use for knowing which language to use (optional, default to es)
     * @param xChildCompanyId In the case of a holding company, the company id of the child company to which will process the request. (optional)
     * @return RequestConfig
     */
    fun ordersUpdateTaxesRequestConfig(id: kotlin.String, taxId: kotlin.String, updateOrderTaxRequest: UpdateOrderTaxRequest, acceptLanguage: AcceptLanguageOrdersUpdateTaxes?, xChildCompanyId: kotlin.String?) : RequestConfig<UpdateOrderTaxRequest> {
        val localVariableBody = updateOrderTaxRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        xChildCompanyId?.apply { localVariableHeaders["X-Child-Company-Id"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/vnd.conekta-v2.1.0+json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/orders/{id}/tax_lines/{tax_id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"tax_id"+"}", encodeURIComponent(taxId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
